<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xin.inote.mapper.CommentMapper">
  <resultMap id="BaseResultMap" type="xin.inote.pojo.Comment">
    <result column="comment_id" jdbcType="INTEGER" property="comment_id" />
    <result column="comment_article_id" jdbcType="INTEGER" property="comment_article_id" />
    <result column="comment_author_name" jdbcType="VARCHAR" property="comment_author_name" />
    <result column="comment_author_url" jdbcType="VARCHAR" property="comment_author_url" />
    <result column="comment_author_email" jdbcType="VARCHAR" property="comment_author_email" />
    <result column="comment_author_date" jdbcType="TIMESTAMP" property="comment_author_date" />
    <result column="comment_user_id" jdbcType="INTEGER" property="comment_user_id" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="xin.inote.pojo.Comment">
    <result column="comment_author_content" jdbcType="LONGVARCHAR" property="comment_author_content" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    comment_id, comment_article_id, comment_author_name, comment_author_url, comment_author_email, 
    comment_author_date, comment_user_id
  </sql>
  <sql id="Blob_Column_List">
    comment_author_content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="xin.inote.pojo.CommentExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from b_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="xin.inote.pojo.CommentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from b_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="xin.inote.pojo.CommentExample">
    delete from b_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="xin.inote.pojo.Comment">
    insert into b_comment (comment_id, comment_article_id, comment_author_name, 
      comment_author_url, comment_author_email, 
      comment_author_date, comment_user_id, 
      comment_author_content)
    values (#{comment_id,jdbcType=INTEGER}, #{comment_article_id,jdbcType=INTEGER}, #{comment_author_name,jdbcType=VARCHAR}, 
      #{comment_author_url,jdbcType=VARCHAR}, #{comment_author_email,jdbcType=VARCHAR}, 
      #{comment_author_date,jdbcType=TIMESTAMP}, #{comment_user_id,jdbcType=INTEGER}, 
      #{comment_author_content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="xin.inote.pojo.Comment">
    insert into b_comment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="comment_id != null">
        comment_id,
      </if>
      <if test="comment_article_id != null">
        comment_article_id,
      </if>
      <if test="comment_author_name != null">
        comment_author_name,
      </if>
      <if test="comment_author_url != null">
        comment_author_url,
      </if>
      <if test="comment_author_email != null">
        comment_author_email,
      </if>
      <if test="comment_author_date != null">
        comment_author_date,
      </if>
      <if test="comment_user_id != null">
        comment_user_id,
      </if>
      <if test="comment_author_content != null">
        comment_author_content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="comment_id != null">
        #{comment_id,jdbcType=INTEGER},
      </if>
      <if test="comment_article_id != null">
        #{comment_article_id,jdbcType=INTEGER},
      </if>
      <if test="comment_author_name != null">
        #{comment_author_name,jdbcType=VARCHAR},
      </if>
      <if test="comment_author_url != null">
        #{comment_author_url,jdbcType=VARCHAR},
      </if>
      <if test="comment_author_email != null">
        #{comment_author_email,jdbcType=VARCHAR},
      </if>
      <if test="comment_author_date != null">
        #{comment_author_date,jdbcType=TIMESTAMP},
      </if>
      <if test="comment_user_id != null">
        #{comment_user_id,jdbcType=INTEGER},
      </if>
      <if test="comment_author_content != null">
        #{comment_author_content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="xin.inote.pojo.CommentExample" resultType="java.lang.Long">
    select count(*) from b_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update b_comment
    <set>
      <if test="record.comment_id != null">
        comment_id = #{record.comment_id,jdbcType=INTEGER},
      </if>
      <if test="record.comment_article_id != null">
        comment_article_id = #{record.comment_article_id,jdbcType=INTEGER},
      </if>
      <if test="record.comment_author_name != null">
        comment_author_name = #{record.comment_author_name,jdbcType=VARCHAR},
      </if>
      <if test="record.comment_author_url != null">
        comment_author_url = #{record.comment_author_url,jdbcType=VARCHAR},
      </if>
      <if test="record.comment_author_email != null">
        comment_author_email = #{record.comment_author_email,jdbcType=VARCHAR},
      </if>
      <if test="record.comment_author_date != null">
        comment_author_date = #{record.comment_author_date,jdbcType=TIMESTAMP},
      </if>
      <if test="record.comment_user_id != null">
        comment_user_id = #{record.comment_user_id,jdbcType=INTEGER},
      </if>
      <if test="record.comment_author_content != null">
        comment_author_content = #{record.comment_author_content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update b_comment
    set comment_id = #{record.comment_id,jdbcType=INTEGER},
      comment_article_id = #{record.comment_article_id,jdbcType=INTEGER},
      comment_author_name = #{record.comment_author_name,jdbcType=VARCHAR},
      comment_author_url = #{record.comment_author_url,jdbcType=VARCHAR},
      comment_author_email = #{record.comment_author_email,jdbcType=VARCHAR},
      comment_author_date = #{record.comment_author_date,jdbcType=TIMESTAMP},
      comment_user_id = #{record.comment_user_id,jdbcType=INTEGER},
      comment_author_content = #{record.comment_author_content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update b_comment
    set comment_id = #{record.comment_id,jdbcType=INTEGER},
      comment_article_id = #{record.comment_article_id,jdbcType=INTEGER},
      comment_author_name = #{record.comment_author_name,jdbcType=VARCHAR},
      comment_author_url = #{record.comment_author_url,jdbcType=VARCHAR},
      comment_author_email = #{record.comment_author_email,jdbcType=VARCHAR},
      comment_author_date = #{record.comment_author_date,jdbcType=TIMESTAMP},
      comment_user_id = #{record.comment_user_id,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>